# üöÄ AirQuality Data Platform

Ce projet met en place une **plateforme de traitement et d‚Äôanalyse de donn√©es qualit√© de l‚Äôair** √† l‚Äôaide de **Docker Compose**.  
Il inclut plusieurs services pour le stockage, l‚Äôorchestration, l‚Äôanalyse et la visualisation des donn√©es.

---

## üì¶ Services inclus

- **MinIO** : Stockage S3 local pour les fichiers et datasets.  
- **PostgreSQL** : Data Warehouse pour stocker les m√©triques qualit√© de l‚Äôair.  
- **Airflow** : Orchestration des pipelines de donn√©es.  
- **PySpark (Jupyter Notebook)** : Analyse et transformation des donn√©es distribu√©es.  
- **Grafana** : Visualisation des donn√©es qualit√© de l‚Äôair.  

---

## ‚ñ∂Ô∏è D√©marrage

### Lancer les conteneurs
```bash
docker-compose up -d

‚öôÔ∏è Initialisation
    1. Initialiser la base Airflow
    docker-compose run --rm airflow-webserver airflow db init

## Cr√©er la base et la table dans PostgreSQL

    docker exec -it airquali-track-postgres-1 psql -U admin -d airquality

## Ex√©cuter le script SQL :
    CREATE TABLE IF NOT EXISTS air_quality_metrics (
        id SERIAL PRIMARY KEY,
        location_name VARCHAR(255),
        city VARCHAR(255),
        country VARCHAR(255),
        parameter VARCHAR(50),  -- ex: pm25, pm10, so2
        value DOUBLE PRECISION,
        unit VARCHAR(20),
        last_updated_utc TIMESTAMP,
        lat DOUBLE PRECISION,
        lon DOUBLE PRECISION,
        loaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Index pour acc√©l√©rer les requ√™tes
    CREATE INDEX IF NOT EXISTS idx_parameter ON air_quality_metrics(parameter);
    CREATE INDEX IF NOT EXISTS idx_location ON air_quality_metrics(location_name);
    CREATE INDEX IF NOT EXISTS idx_country ON air_quality_metrics(country);

## Debug et logs
    docker-compose logs -f airflow-webserver
    V√©rifier un autre service

Interfaces disponibles

    MinIO Console : http://localhost:9001
    Identifiant : minioadmin / Mot de passe : minioadmin

    PostgreSQL : localhost:5432 (user: admin, password: password)

    Airflow Webserver : http://localhost:8080

    Jupyter PySpark Notebook : http://localhost:8888
    (token : airquality)

    Grafana : http://localhost:3000
    (user: admin, password: admin)
